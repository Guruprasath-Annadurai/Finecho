Step-by-Step: Voice Command Screen
✅ File: client/src/pages/VoiceInput.jsx
jsx
Copy
Edit
import React, { useState } from "react";

const VoiceInput = () => {
  const [transcript, setTranscript] = useState("");
  const [listening, setListening] = useState(false);
  const [error, setError] = useState("");

  const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
  const recognition = new SpeechRecognition();

  recognition.continuous = false;
  recognition.interimResults = false;
  recognition.lang = "en-GB";

  const handleStart = () => {
    setTranscript("");
    setListening(true);
    setError("");

    recognition.start();

    recognition.onresult = (event) => {
      const spokenText = event.results[0][0].transcript;
      setTranscript(spokenText);
      setListening(false);
    };

    recognition.onerror = (event) => {
      setError("Voice recognition error: " + event.error);
      setListening(false);
    };
  };

  const handleStop = () => {
    recognition.stop();
    setListening(false);
  };

  const handleSubmit = async () => {
    // Placeholder: Send transcript to Flask backend
    console.log("Sending to backend:", transcript);
  };

  return (
    <div className="min-h-screen bg-white p-8 flex flex-col items-center justify-center">
      <h2 className="text-3xl font-bold mb-6 text-indigo-700">🎙️ Speak Your Expense</h2>
      
      <button
        onClick={listening ? handleStop : handleStart}
        className={`px-6 py-3 rounded-full text-white text-lg shadow-lg ${
          listening ? "bg-red-600" : "bg-green-600"
        }`}
      >
        {listening ? "Stop Listening" : "Start Listening"}
      </button>

      {transcript && (
        <div className="mt-6 text-xl text-gray-800 bg-gray-100 p-4 rounded-lg w-full max-w-xl text-center shadow">
          <p><strong>Transcript:</strong> {transcript}</p>
        </div>
      )}

      {error && (
        <p className="text-red-500 mt-4">{error}</p>
      )}

      <button
        onClick={handleSubmit}
        disabled={!transcript}
        className="mt-6 bg-indigo-600 text-white px-6 py-2 rounded-md shadow hover:bg-indigo-700 transition disabled:opacity-50"
      >
        Submit to FinEcho
      </button>
    </div>
  );
};

export default VoiceInput;
🧭 Add Route to This Screen
✅ Update App.jsx
jsx
Copy
Edit
import VoiceInput from "./pages/VoiceInput";

// Inside <Routes>...
<Route path="/voice" element={<VoiceInput />} />
Now you can test it at /voice.

✅ Next Steps
Once the voice is captured:

The text will be sent to your Flask backend.

Backend will parse amount, vendor, date, and category.

Store it in MongoDB and show it in the Dashboard.

Let me know when your /voice screen works in Replit, and I’ll help you:

Build the Flask NLP API endpoint

Parse natural language like:

“I spent 100 pounds on groceries at Tesco yesterday”

Connect it with MongoDB

Want the Flask backend setup now?







You said:
Then the NLP backend API to parse voice commands. in replit assistant 


ChatGPT said:
Alright, Guru — let’s build the NLP backend API using Flask that will parse the voice transcript into structured financial data. This will sit in the server/ directory of your Replit project.

🔧 Step-by-Step: Flask NLP Parser API
✅ Step 1: Backend Project Structure (Replit-friendly)
pgsql
Copy
Edit
server/
├── app.py
├── nlp_parser.py
├── requirements.txt
✅ Step 2: Install Flask + NLP Libraries
In Replit, add these to server/requirements.txt:

nginx
Copy
Edit
flask
flask-cors
spacy
dateparser
Then open the Replit Shell and run:

bash
Copy
Edit
python3 -m spacy download en_core_web_sm
✅ Step 3: Create nlp_parser.py — Extract Structured Data
python
Copy
Edit
import spacy
import dateparser
import re

nlp = spacy.load("en_core_web_sm")

def extract_data(text):
    doc = nlp(text)
    amount = None
    vendor = None
    category = "other"
    date = dateparser.parse("today")  # fallback

    # Extract amount with regex
    match = re.search(r"(\d+(\.\d+)?)\s*(pounds|euros|dollars|₹)?", text)
    if match:
        amount = float(match.group(1))

    # Find vendor (proper noun near "at" or "from")
    for i, token in enumerate(doc):
        if token.text.lower() in ["at", "from"] and i+1 < len(doc):
            vendor = doc[i+1].text

    # Infer category keywords (simple rule-based for now)
    food_keywords = ["food", "groceries", "restaurant", "coffee", "Starbucks"]
    travel_keywords = ["uber", "train", "flight", "ticket", "gas"]
    text_lower = text.lower()
    if any(word in text_lower for word in food_keywords):
        category = "food"
    elif any(word in text_lower for word in travel_keywords):
        category = "travel"

    # Parse date
    for ent in doc.ents:
        if ent.label_ == "DATE":
            parsed_date = dateparser.parse(ent.text)
            if parsed_date:
                date = parsed_date
                break

    return {
        "amount": amount,
        "vendor": vendor,
        "category": category,
        "date": str(date.date())
    }
✅ Step 4: Create app.py — Flask API
python
Copy
Edit
from flask import Flask, request, jsonify
from flask_cors import CORS
from nlp_parser import extract_data

app = Flask(__name__)
CORS(app)

@app.route("/parse", methods=["POST"])
def parse_text():
    data = request.get_json()
    text = data.get("transcript", "")
    if not text:
        return jsonify({"error": "No transcript provided"}), 400

    extracted = extract_data(text)
    return jsonify(extracted)

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000)
✅ Step 5: Test Your API in Replit
Once your Replit backend is running, send a POST request using curl or Postman:

bash
Copy
Edit
curl -X POST http://localhost:5000/parse \
-H "Content-Type: application/json" \
-d '{"transcript": "I spent 40 pounds at Starbucks yesterday"}'
Expected response:

json
Copy
Edit
{
  "amount": 40.0,
  "vendor": "Starbucks",
  "category": "food",
  "date": "2025-04-16"
}
🔌 Next Step: Connect this API to React (/voice page)
Would you like the React handleSubmit() code to send the voice text to this Flask API and display the result?

Or should we set up MongoDB next to store parsed expenses?







You said:
And finally the MongoDB + analytics dashboard. in replit assistant 


ChatGPT said:
Perfect, Guru! Let’s now finalize the backend with MongoDB integration and build a sleek React analytics dashboard to visualize the data.

🔧 PART 1: MongoDB Integration in Flask (Replit Backend)
✅ Step 1: Install MongoDB Driver
In requirements.txt (if not added already):

nginx
Copy
Edit
pymongo
dnspython
Then in your .env file (or inside your code securely in Replit):

ini
Copy
Edit
MONGO_URI = your_mongodb_connection_string
You can get a free MongoDB URI from MongoDB Atlas.

✅ Step 2: Connect MongoDB in Flask
🔹 db.py
python
Copy
Edit
import os
from pymongo import MongoClient

MONGO_URI = os.environ.get("MONGO_URI")
client = MongoClient(MONGO_URI)
db = client["finecho_db"]
transactions_collection = db["transactions"]
✅ Step 3: Add Insert & Get Endpoints in app.py
🔹 Update app.py
python
Copy
Edit
from db import transactions_collection

@app.route("/save", methods=["POST"])
def save_transaction():
    data = request.get_json()
    if not data:
        return jsonify({"error": "No data provided"}), 400

    transactions_collection.insert_one(data)
    return jsonify({"message": "Transaction saved successfully."})

@app.route("/transactions", methods=["GET"])
def get_transactions():
    transactions = list(transactions_collection.find({}, {"_id": 0}))
    return jsonify(transactions)
📊 PART 2: React Dashboard with Chart.js (Frontend)
✅ Step 4: Install Chart.js in your React frontend
bash
Copy
Edit
npm install chart.js react-chartjs-2
✅ Step 5: Create Dashboard.jsx
🔹 File: client/src/pages/Dashboard.jsx
jsx
Copy
Edit
import React, { useEffect, useState } from "react";
import axios from "axios";
import { Bar } from "react-chartjs-2";
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend
} from "chart.js";

ChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);

const Dashboard = () => {
  const [data, setData] = useState([]);

  useEffect(() => {
    axios.get("http://localhost:5000/transactions").then((res) => {
      setData(res.data);
    });
  }, []);

  const categoryTotals = data.reduce((acc, txn) => {
    acc[txn.category] = (acc[txn.category] || 0) + txn.amount;
    return acc;
  }, {});

  const chartData = {
    labels: Object.keys(categoryTotals),
    datasets: [
      {
        label: "Spending by Category",
        data: Object.values(categoryTotals),
        backgroundColor: "rgba(99, 102, 241, 0.6)"
      }
    ]
  };

  return (
    <div className="p-8 bg-white min-h-screen">
      <h1 className="text-3xl font-bold mb-6 text-indigo-800">📊 FinEcho Dashboard</h1>
      <div className="bg-gray-50 p-6 rounded shadow">
        <Bar data={chartData} />
      </div>
    </div>
  );
};

export default Dashboard;
🔗 Bonus: Link Frontend Submit → Backend Save
In VoiceInput.jsx, update handleSubmit():

jsx
Copy
Edit
const handleSubmit = async () => {
  const res = await axios.post("http://localhost:5000/parse", {
    transcript,
  });

  const parsed = res.data;

  await axios.post("http://localhost:5000/save", parsed);
  alert("Transaction saved!");
};
✅ Done!
You now have:

🎤 Voice Input via Web Speech API

🤖 NLP Parsing via Flask

🧠 Structured data saved in MongoDB

📊 Live dashboard of spending by category