Step-by-Step: Firebase Auth in React (Replit)
âœ… Step 1: Set up Firebase Project
Go to Firebase Console

Create a new project (e.g., finecho)

Go to Authentication â†’ Sign-in method

Enable Email/Password

Go to Project Settings â†’ Web App

Register the app and grab your Firebase config

âœ… Step 2: Install Firebase SDK
In Replit terminal:

bash
Copy
Edit
npm install firebase
âœ… Step 3: Create Firebase Config
ðŸ”¹ File: client/src/firebase.js
js
Copy
Edit
import { initializeApp } from "firebase/app";
import { getAuth } from "firebase/auth";

const firebaseConfig = {
  apiKey: "YOUR_API_KEY",
  authDomain: "YOUR_PROJECT_ID.firebaseapp.com",
  projectId: "YOUR_PROJECT_ID",
  storageBucket: "YOUR_PROJECT_ID.appspot.com",
  messagingSenderId: "YOUR_SENDER_ID",
  appId: "YOUR_APP_ID"
};

const app = initializeApp(firebaseConfig);
export const auth = getAuth(app);
âœ… Step 4: Auth Context (Optional, for global access)
ðŸ”¹ File: client/src/context/AuthContext.jsx
jsx
Copy
Edit
import React, { createContext, useContext, useState, useEffect } from "react";
import { auth } from "../firebase";
import { onAuthStateChanged } from "firebase/auth";

const AuthContext = createContext();

export const useAuth = () => useContext(AuthContext);

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);

  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, setUser);
    return unsubscribe;
  }, []);

  return (
    <AuthContext.Provider value={{ user }}>
      {children}
    </AuthContext.Provider>
  );
};
Then wrap your app in AuthProvider inside main.jsx or App.jsx.

âœ… Step 5: Login & Register Page
ðŸ”¹ File: client/src/pages/Login.jsx
jsx
Copy
Edit
import React, { useState } from "react";
import { getAuth, signInWithEmailAndPassword, createUserWithEmailAndPassword } from "firebase/auth";
import { useNavigate } from "react-router-dom";

const Login = () => {
  const auth = getAuth();
  const navigate = useNavigate();
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [isRegister, setIsRegister] = useState(false);
  const [error, setError] = useState("");

  const handleAuth = async () => {
    try {
      if (isRegister) {
        await createUserWithEmailAndPassword(auth, email, password);
      } else {
        await signInWithEmailAndPassword(auth, email, password);
      }
      navigate("/dashboard");
    } catch (err) {
      setError(err.message);
    }
  };

  return (
    <div className="min-h-screen bg-gray-100 flex items-center justify-center">
      <div className="bg-white p-8 rounded shadow-lg w-full max-w-md">
        <h2 className="text-2xl font-bold mb-6 text-center">
          {isRegister ? "Sign Up" : "Log In"}
        </h2>
        <input
          type="email"
          placeholder="Email"
          className="w-full mb-4 p-3 border rounded"
          onChange={(e) => setEmail(e.target.value)}
        />
        <input
          type="password"
          placeholder="Password"
          className="w-full mb-4 p-3 border rounded"
          onChange={(e) => setPassword(e.target.value)}
        />
        <button
          onClick={handleAuth}
          className="w-full bg-indigo-600 text-white p-3 rounded hover:bg-indigo-700"
        >
          {isRegister ? "Register" : "Login"}
        </button>
        <p
          className="text-sm text-center mt-4 cursor-pointer text-indigo-600"
          onClick={() => setIsRegister(!isRegister)}
        >
          {isRegister ? "Already have an account? Log in" : "No account? Sign up"}
        </p>
        {error && <p className="text-red-500 text-sm mt-3">{error}</p>}
      </div>
    </div>
  );
};

export default Login;
âœ… Step 6: Auth-Guard Routes
ðŸ”¹ In App.jsx:
jsx
Copy
Edit
import { useAuth } from "./context/AuthContext";

// Inside <Routes>
<Route path="/" element={<Login />} />
<Route
  path="/dashboard"
  element={user ? <Dashboard /> : <Navigate to="/" />}
/>
ðŸ§  BONUS: Attach user ID to every MongoDB entry
Update your voice input handleSubmit to include:

js
Copy
Edit
const userId = auth.currentUser?.uid;

await axios.post("http://localhost:5000/save", {
  ...parsed,
  userId,
});
And in your backend Flask /save, store userId to enable per-user dashboards.